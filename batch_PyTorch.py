# Batch class for mini-batch parallelization, adapted from PyTorch Geometric repository at
# https://github.com/rusty1s/pytorch_geometric
# Load modules
import torch
from Data_PyTorch import Data


class Batch(Data):
    """
    Batch class for mini-batch parallelization. All of the methods of class Data can be used.
    In addition, single graphs can be reconstructed via the assignment vector, batch, which
    maps each node to its respective graph identifier.
    """

    def __init__(self, batch=None, **kwargs):
        super(Batch, self).__init__(**kwargs)
        self.batch = batch

    @staticmethod
    def from_data_list(data_list):
        """Constructs an object of class Batch from a list of graphs generated by a DataLoader"""

        keys = data_list[0].keys
        assert 'batch' not in keys

        batch = Batch()

        for key in keys:
            batch[key] = []
        batch.batch = []

        cumsum = 0
        for i, data in enumerate(data_list):
            num_nodes = data.num_nodes
            batch.batch.append(torch.full((num_nodes, ), i, dtype=torch.long))
            for key in keys:
                item = data[key]
                # Ensures that the cumulative edge_index matrix of the batch will
                # have different sets of indices for each subgraph of the batch
                item = item + cumsum if batch.cumsum(key) else item
                batch[key].append(item)
            cumsum += num_nodes

        for key in keys:
            # Concatenates batch['edge_index'] differently than the others (and also possibly batch['y'])
            batch[key] = torch.cat(batch[key], dim=data_list[0].cat_dim(key))
        batch.batch = torch.cat(batch.batch, dim=-1)
        return batch.contiguous()

    def cumsum(self, key):
        """
        Checks for the presence of 'edge_index' attribute for determining how to index values
        :param key: Data() attributes such as 'x' or 'pos'
        :return: Boolean
        """
        return key in ['edge_index']

    @property
    def num_graphs(self):
        """Compute the number of graphs in the batch"""
        return self.batch[-1].item() + 1
